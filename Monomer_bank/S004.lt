
import "oplsaa.lt"    # <-- defines the "OPLSAA" force field

## Trehalose

S004 inherits OPLSAA {

  # atom-id  mol-id atom-type  charge     x             y                z

  write("Data Atoms") {
$atom:G01	$mol:...	@atom:111	0	7.9	-2.029	0.896
$atom:G02	$mol:...	@atom:111	0	8.275	0.776	-2.13
$atom:G03	$mol:...	@atom:111	0	7.842	1.555	1.441
$atom:G04	$mol:...	@atom:111	0	6.466	2.816	-1.717
$atom:G05	$mol:...	@atom:111	0	2.535	0.038	-2.001
$atom:G06	$mol:...	@atom:111	0	1.482	-1.316	1.142
$atom:G07	$mol:...	@atom:111	0	-1.045	0.178	0.294
$atom:G08	$mol:...	@atom:111	0	-1.762	2.642	-0.482
$atom:G09	$mol:...	@atom:122	0	5.571	0.187	-0.955
$atom:G10	$mol:...	@atom:122	0	4.113	1.951	-0.617
$atom:G11	$mol:...	@atom:122	0	1.896	2.388	-0.288
$atom:G12	$mol:...	@atom:115	0	6.722	-1.268	0.656
$atom:G13	$mol:...	@atom:432	0	6.81	-0.483	-0.663
$atom:G14	$mol:...	@atom:116	0	8.023	0.47	-0.748
$atom:G15	$mol:...	@atom:116	0	7.793	1.776	0.031
$atom:G16	$mol:...	@atom:116	0	6.438	2.384	-0.34
$atom:G17	$mol:...	@atom:135	0	5.319	1.34	-0.151
$atom:G18	$mol:...	@atom:115	0	-0.416	3.014	-0.208
$atom:G19	$mol:...	@atom:135	0	2.923	1.421	-0.027
$atom:G20	$mol:...	@atom:116	0	2.599	0.007	-0.563
$atom:G21	$mol:...	@atom:116	0	1.26	-0.5	-0.019
$atom:G22	$mol:...	@atom:116	0	0.31	0.643	0.371
$atom:G23	$mol:...	@atom:432	0	0.576	1.877	-0.499
$atom:G24	$mol:...	@atom:112	0	7.924	-2.748	0.24
$atom:G25	$mol:...	@atom:118	0	5.863	-1.948	0.635
$atom:G26	$mol:...	@atom:118	0	6.567	-0.613	1.516
$atom:G27	$mol:...	@atom:410	0	6.93	-1.223	-1.465
$atom:G28	$mol:...	@atom:112	0	7.605	1.44	-2.405
$atom:G29	$mol:...	@atom:112	0	8.742	1.243	1.655
$atom:G30	$mol:...	@atom:112	0	5.53	3.005	-1.937
$atom:G31	$mol:...	@atom:112	0	3.377	0.447	-2.286
$atom:G32	$mol:...	@atom:112	0	0.601	-1.623	1.433
$atom:G33	$mol:...	@atom:112	0	-1.23	-0.036	-0.642
$atom:G34	$mol:...	@atom:112	0	-1.979	1.908	0.127
$atom:G35	$mol:...	@atom:118	0	8.92	-0.037	-0.377
$atom:G36	$mol:...	@atom:118	0	8.583	2.493	-0.227
$atom:G37	$mol:...	@atom:118	0	6.224	3.267	0.272
$atom:G38	$mol:...	@atom:136	0	5.223	1.066	0.906
$atom:G39	$mol:...	@atom:118	0	-0.173	3.887	-0.823
$atom:G40	$mol:...	@atom:118	0	-0.344	3.339	0.837
$atom:G41	$mol:...	@atom:136	0	3.043	1.39	1.063
$atom:G42	$mol:...	@atom:118	0	3.391	-0.7	-0.3
$atom:G43	$mol:...	@atom:118	0	0.784	-1.152	-0.762
$atom:G44	$mol:...	@atom:118	0	0.479	0.904	1.423
$atom:G45	$mol:...	@atom:410	0	0.46	1.608	-1.557
  }

  # Atom type numbers (@atom:80,@atom:85) are defined in "oplsaa.lt".  Excerpt:
  #   @atom:80 12.011   #CT "Alkane CH3-" 6 partial charge=-0.18
  #   @atom:81 12.011   #CT "Alkane -CH2-" 6 partial charge=-0.12
  #   @atom:85 1.008    #HC "Alkane H-C" 1 partial charge=0.06
  # In this example, atomic charges are generated by atom type (according to
  # rules in oplsaa.lt), and can be omitted. Just leave them as "0.00" for now.
  # The "..." in "$mol:..." tells moltemplate that this molecule may be part
  # of a larger molecule, and (if so) to use the larger parent object's 
  # molecule id number as it's own.

  # Now specify which pairs of atoms are bonded:
  write('Data Bond List') {
    $bond:B01 $atom:G01 $atom:G12
    $bond:B02 $atom:G01 $atom:G24
    $bond:B03 $atom:G02 $atom:G14
    $bond:B04 $atom:G02 $atom:G28
    $bond:B05 $atom:G03 $atom:G15
    $bond:B06 $atom:G03 $atom:G29
    $bond:B07 $atom:G04 $atom:G16
    $bond:B08 $atom:G04 $atom:G30
    $bond:B09 $atom:G05 $atom:G20
    $bond:B10 $atom:G05 $atom:G31
    $bond:B11 $atom:G06 $atom:G21
    $bond:B12 $atom:G06 $atom:G32
    $bond:B13 $atom:G07 $atom:G22
    $bond:B14 $atom:G07 $atom:G33
    $bond:B15 $atom:G08 $atom:G18
    $bond:B16 $atom:G08 $atom:G34
    $bond:B17 $atom:G09 $atom:G13
    $bond:B18 $atom:G09 $atom:G17
    $bond:B19 $atom:G10 $atom:G17
    $bond:B20 $atom:G10 $atom:G19
    $bond:B21 $atom:G11 $atom:G19
    $bond:B22 $atom:G11 $atom:G23
    $bond:B23 $atom:G12 $atom:G13
    $bond:B24 $atom:G12 $atom:G25
    $bond:B25 $atom:G12 $atom:G26
    $bond:B26 $atom:G13 $atom:G14
    $bond:B27 $atom:G13 $atom:G27
    $bond:B28 $atom:G14 $atom:G15
    $bond:B29 $atom:G14 $atom:G35
    $bond:B30 $atom:G15 $atom:G16
    $bond:B31 $atom:G15 $atom:G36
    $bond:B32 $atom:G16 $atom:G17
    $bond:B33 $atom:G16 $atom:G37
    $bond:B34 $atom:G17 $atom:G38
    $bond:B35 $atom:G18 $atom:G23
    $bond:B36 $atom:G18 $atom:G39
    $bond:B37 $atom:G18 $atom:G40
    $bond:B38 $atom:G19 $atom:G20
    $bond:B39 $atom:G19 $atom:G41
    $bond:B40 $atom:G20 $atom:G21
    $bond:B41 $atom:G20 $atom:G42
    $bond:B42 $atom:G21 $atom:G22
    $bond:B43 $atom:G21 $atom:G43
    $bond:B44 $atom:G22 $atom:G23
    $bond:B45 $atom:G22 $atom:G44
    $bond:B46 $atom:G23 $atom:G45
  }

} # trehalose



# Optional: Shift all the coordinates in the +Y direction by 0.4431163.
#           This way, the carbon atom is no longer located at 0,0,0, but the
#           axis of an alkane chain containing this monomer is at 0,0,0.
#           (This makes it more convenient to construct a polymer later.
#            If this is confusing, then simply add 0.4431163 to the Y 
#            coordinates in the "Data Atoms" section above.)


######### (scratchwork calculations for the atomic coordinates) #########
# Lcc = 1.5350 # length of the C-C bond (Sp3)
# Lch = 1.0930 # length of the C-H bond
# theta=2*atan(sqrt(2)) # ~= 109.5 degrees = tetrahedronal angle (C-C-C angle)
# DeltaXc = Lcc*sin(theta/2)  # = 1.2533222517240594
# DeltaYc = Lcc*cos(theta/2)  # = 0.8862326632060754
#                             # 0.5*DeltaYc = 0.4431163316030377
# DeltaZh = Lch*sin(theta/2)  # = 0.8924307629540046
# DeltaYh = Lch*cos(theta/2)  # = 0.6310438442242609
