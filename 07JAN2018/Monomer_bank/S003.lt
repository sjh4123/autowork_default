
import "oplsaa.lt"    # <-- defines the "OPLSAA" force field

## alpha Glucose

S003 inherits OPLSAA {

  # atom-id  mol-id atom-type  charge     x             y                z

  write("Data Atoms") {
$atom:G01	$mol:...	@atom:129	0	1.747	1.293	-0.592
$atom:G02	$mol:...	@atom:111	0	0.192	-0.801	-1.18
$atom:G03	$mol:...	@atom:111	0	-2.357	-0.926	0.749
$atom:G04	$mol:...	@atom:111	0	-3.695	1.504	0.29
$atom:G05	$mol:...	@atom:111	0	-0.912	3.889	1.331
$atom:G06	$mol:...	@atom:122	0	-0.344	2.182	-1.068
$atom:G07	$mol:...	@atom:115	0	-1.621	3.921	0.093
$atom:G08	$mol:...	@atom:137   0	0.402	1.399	-0.142
$atom:G09	$mol:...	@atom:116	0	-0.24	-0.001	-0.053
$atom:G10	$mol:...	@atom:116	0	-1.774	0.082	-0.092
$atom:G11	$mol:...	@atom:116	0	-2.264	1.46	0.353
$atom:G12	$mol:...	@atom:432	0	-1.654	2.536	-0.57
$atom:G13	$mol:...	@atom:130	0	1.819	0.426	-1.033
$atom:G14	$mol:...	@atom:138	0	0.426	1.884	0.838
$atom:G15	$mol:...	@atom:112	0	-0.023	-0.287	-1.984
$atom:G16	$mol:...	@atom:118   0	0.125	-0.524	0.837
$atom:G17	$mol:...	@atom:112	0	-2.003	-1.781	0.439
$atom:G18	$mol:...	@atom:118	0	-2.155	-0.127	-1.1
$atom:G19	$mol:...	@atom:112	0	-3.993	0.684	0.735
$atom:G20	$mol:...	@atom:118	0	-1.995	1.617	1.404
$atom:G21	$mol:...	@atom:112	0	-0.842	4.81	1.637
$atom:G22	$mol:...	@atom:118	0	-1.113	4.637	-0.562
$atom:G23	$mol:...	@atom:118	0	-2.637	4.275	0.294
$atom:G24	$mol:...	@atom:410	0	-2.282	2.634	-1.464
  }

  # Atom type numbers (@atom:80,@atom:85) are defined in "oplsaa.lt".  Excerpt:
  #   @atom:80 12.011   #CT "Alkane CH3-" 6 partial charge=-0.18
  #   @atom:81 12.011   #CT "Alkane -CH2-" 6 partial charge=-0.12
  #   @atom:85 1.008    #HC "Alkane H-C" 1 partial charge=0.06
  # In this example, atomic charges are generated by atom type (according to
  # rules in oplsaa.lt), and can be omitted. Just leave them as "0.00" for now.
  # The "..." in "$mol:..." tells moltemplate that this molecule may be part
  # of a larger molecule, and (if so) to use the larger parent object's 
  # molecule id number as it's own.

  # Now specify which pairs of atoms are bonded:
  write('Data Bond List') {
    $bond:B01 $atom:G01 $atom:G08
    $bond:B02 $atom:G01 $atom:G13
    $bond:B03 $atom:G02 $atom:G09
    $bond:B04 $atom:G02 $atom:G15
    $bond:B05 $atom:G03 $atom:G10
    $bond:B06 $atom:G03 $atom:G17
    $bond:B07 $atom:G04 $atom:G11
    $bond:B08 $atom:G04 $atom:G19
    $bond:B09 $atom:G05 $atom:G07
    $bond:B10 $atom:G05 $atom:G21
    $bond:B11 $atom:G06 $atom:G08
    $bond:B12 $atom:G06 $atom:G12
    $bond:B13 $atom:G07 $atom:G12
    $bond:B14 $atom:G07 $atom:G22
    $bond:B15 $atom:G07 $atom:G23
    $bond:B16 $atom:G08 $atom:G09
    $bond:B17 $atom:G08 $atom:G14
    $bond:B18 $atom:G09 $atom:G10
    $bond:B19 $atom:G09 $atom:G16
    $bond:B20 $atom:G10 $atom:G11
    $bond:B21 $atom:G10 $atom:G18
    $bond:B22 $atom:G11 $atom:G12
    $bond:B23 $atom:G11 $atom:G20
    $bond:B24 $atom:G12 $atom:G24
  }

} # glucose



# Optional: Shift all the coordinates in the +Y direction by 0.4431163.
#           This way, the carbon atom is no longer located at 0,0,0, but the
#           axis of an alkane chain containing this monomer is at 0,0,0.
#           (This makes it more convenient to construct a polymer later.
#            If this is confusing, then simply add 0.4431163 to the Y 
#            coordinates in the "Data Atoms" section above.)


######### (scratchwork calculations for the atomic coordinates) #########
# Lcc = 1.5350 # length of the C-C bond (Sp3)
# Lch = 1.0930 # length of the C-H bond
# theta=2*atan(sqrt(2)) # ~= 109.5 degrees = tetrahedronal angle (C-C-C angle)
# DeltaXc = Lcc*sin(theta/2)  # = 1.2533222517240594
# DeltaYc = Lcc*cos(theta/2)  # = 0.8862326632060754
#                             # 0.5*DeltaYc = 0.4431163316030377
# DeltaZh = Lch*sin(theta/2)  # = 0.8924307629540046
# DeltaYh = Lch*cos(theta/2)  # = 0.6310438442242609
